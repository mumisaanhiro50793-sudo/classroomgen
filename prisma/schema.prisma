generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PromptRole {
  STUDENT
  TEACHER
}

enum SubmissionStatus {
  PENDING
  SUCCESS
  ERROR
}

enum ChatSender {
  STUDENT
  AI
}

model Session {
  id             String             @id @default(cuid())
  passwordHash   String
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  endedAt        DateTime?
  promptEntries  PromptSubmission[]
  students       Student[]
  chatThreads    ChatThread[]
}

model PromptSubmission {
  id                 String              @id @default(cuid())
  session            Session             @relation(fields: [sessionId], references: [id])
  sessionId          String
  prompt             String
  role               PromptRole
  createdAt          DateTime            @default(now())
  student            Student?            @relation(fields: [studentId], references: [id])
  studentId          String?
  rootSubmission     PromptSubmission?   @relation("RootRelation", fields: [rootSubmissionId], references: [id])
  rootSubmissionId   String?
  refinements        PromptSubmission[]  @relation("RootRelation")
  parentSubmission   PromptSubmission?   @relation("ParentRelation", fields: [parentSubmissionId], references: [id])
  parentSubmissionId String?
  childSubmissions   PromptSubmission[]  @relation("ParentRelation")
  revisionIndex      Int                 @default(0)
  status             SubmissionStatus    @default(PENDING)
  imageData          String?
  imageMimeType      String?
  errorMessage       String?
  isShared           Boolean             @default(false)

  @@index([sessionId])
  @@index([rootSubmissionId])
  @@index([studentId])
}

model Student {
  id           String             @id @default(cuid())
  username     String
  passwordHash String
  createdAt    DateTime           @default(now())
  session      Session            @relation(fields: [sessionId], references: [id])
  sessionId    String
  submissions  PromptSubmission[]
  chatThreads  ChatThread[]
  chatMessages ChatMessage[]

  @@unique([sessionId, username])
}

model ChatThread {
  id         String        @id @default(cuid())
  title      String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  session    Session       @relation(fields: [sessionId], references: [id])
  sessionId  String
  student    Student       @relation(fields: [studentId], references: [id])
  studentId  String
  messages   ChatMessage[]

  @@index([sessionId])
  @@index([studentId])
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  sender    ChatSender
  createdAt DateTime    @default(now())
  thread    ChatThread  @relation(fields: [threadId], references: [id])
  threadId  String
  student   Student?    @relation(fields: [studentId], references: [id])
  studentId String?

  @@index([threadId])
}
